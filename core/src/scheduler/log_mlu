resource/Resource.cpp:        case ResourceType::MLU: {
resource/Resource.cpp:            return "MLU";
resource/MluResource.h:class MluResource : public Resource {
resource/MluResource.h:    explicit MluResource(std::string name, uint64_t device_id, bool enable_executor);
resource/MluResource.h:    operator<<(std::ostream& out, const MluResource& resource);
resource/MluResource.cpp:#include "scheduler/resource/MluResource.h"
resource/MluResource.cpp:operator<<(std::ostream& out, const MluResource& resource) {
resource/MluResource.cpp:MluResource::MluResource(std::string name, uint64_t device_id, bool enable_executor)
resource/MluResource.cpp:    : Resource(std::move(name), ResourceType::MLU, device_id, enable_executor) {
resource/MluResource.cpp:MluResource::LoadFile(TaskPtr task) {
resource/MluResource.cpp:    task->Load(LoadType::CPU2MLU, device_id_);
resource/MluResource.cpp:MluResource::Process(TaskPtr task) {
resource/Resource.h:    MLU = 4,
selector/FaissMLUIVFPQPass.h:#ifdef MILVUS_MLU_VERSION
selector/FaissMLUIVFPQPass.h:class FaissMLUIVFPQPass : public Pass, public ConfigObserver {
selector/FaissMLUIVFPQPass.h:    FaissMLUIVFPQPass();
selector/FaissMLUIVFPQPass.h:    ~FaissMLUIVFPQPass();
selector/FaissMLUIVFPQPass.h:    bool mlu_enable_ = false;
selector/FaissMLUIVFPQPass.h:    std::vector<int64_t> search_mlus_;
selector/FaissMLUIVFPQPass.h:using FaissMLUIVFPQPassPtr = std::shared_ptr<FaissMLUIVFPQPass>;
selector/FaissMLUIVFPQPass.cpp:#ifdef MILVUS_MLU_VERSION
selector/FaissMLUIVFPQPass.cpp:#include "scheduler/selector/FaissMLUIVFPQPass.h"
selector/FaissMLUIVFPQPass.cpp:#include "cache/MluCacheMgr.h"
selector/FaissMLUIVFPQPass.cpp:FaissMLUIVFPQPass::FaissMLUIVFPQPass() {
selector/FaissMLUIVFPQPass.cpp:    ConfigMgr::GetInstance().Attach("mlu.mlu_search_threshold", this);
selector/FaissMLUIVFPQPass.cpp:FaissMLUIVFPQPass::~FaissMLUIVFPQPass() {
selector/FaissMLUIVFPQPass.cpp:    ConfigMgr::GetInstance().Detach("mlu.mlu_search_threshold", this);
selector/FaissMLUIVFPQPass.cpp:FaissMLUIVFPQPass::Init() {
selector/FaissMLUIVFPQPass.cpp:#ifdef MILVUS_MLU_VERSION
selector/FaissMLUIVFPQPass.cpp:    mlu_enable_ = config.mlu.enable();
selector/FaissMLUIVFPQPass.cpp:    threshold_ = config.mlu.mlu_search_threshold();
selector/FaissMLUIVFPQPass.cpp:    search_mlus_ = ParseMLUDevices(config.mlu.search_devices());
selector/FaissMLUIVFPQPass.cpp:FaissMLUIVFPQPass::Run(const TaskPtr& task) {
ResourceFactory.h:#include "resource/MluResource.h"
selector/FaissMLUIVFPQPass.cpp:    if (!mlu_enable_) {
selector/FaissMLUIVFPQPass.cpp:        LOG_SERVER_DEBUG_ << LogOut("FaissMLUIVFPQPass: mlu disable, specify cpu to search!");
selector/FaissMLUIVFPQPass.cpp:        LOG_SERVER_DEBUG_ << LogOut("FaissMLUIVFPQPass: nq < mlu_search_threshold, specify cpu to search!");
selector/FaissMLUIVFPQPass.cpp:    } else if (search_task->topk() > server::MLU_QUERY_MAX_TOPK) {
selector/FaissMLUIVFPQPass.cpp:        LOG_SERVER_DEBUG_ << LogOut("FaissMLUIVFPQPass: topk > mlu_max_topk_threshold, specify cpu to search!");
selector/FaissMLUIVFPQPass.cpp:    } else if (search_task->ExtraParam()[knowhere::IndexParams::nprobe].get<int64_t>() > server::MLU_QUERY_MAX_NPROBE) {
selector/FaissMLUIVFPQPass.cpp:        LOG_SERVER_DEBUG_ << LogOut("FaissMLUIVFPQPass: nprobe > mlu_max_nprobe_threshold, specify cpu to search!");
selector/FaissMLUIVFPQPass.cpp:        LOG_SERVER_DEBUG_ << LogOut("FaissMLUIVFPQPass: nq >= mlu_search_threshold, specify mlu %d to search!",
selector/FaissMLUIVFPQPass.cpp:                                    search_mlus_[idx_]);
selector/FaissMLUIVFPQPass.cpp:        res_ptr = ResMgrInst::GetInstance()->GetResource(ResourceType::MLU, search_mlus_[idx_]);
selector/FaissMLUIVFPQPass.cpp:        idx_ = (idx_ + 1) % search_mlus_.size();
selector/FaissMLUIVFPQPass.cpp:FaissMLUIVFPQPass::ConfigUpdate(const std::string& name) {
selector/FaissMLUIVFPQPass.cpp:    threshold_ = config.mlu.mlu_search_threshold();
SchedInst.cpp:#ifdef MILVUS_MLU_VERSION
SchedInst.cpp:    bool enable_mlu = config.mlu.enable();
SchedInst.cpp:    if (enable_mlu) {
SchedInst.cpp:        std::vector<int64_t> mlu_ids = ParseMLUDevices(config.mlu.search_devices());
SchedInst.cpp:        for (auto& mlu_id : mlu_ids) {
SchedInst.cpp:            ResMgrInst::GetInstance()->Add(ResourceFactory::Create(std::to_string(mlu_id), "MLU", mlu_id));
SchedInst.cpp:            ResMgrInst::GetInstance()->Connect("cpu", std::to_string(mlu_id), pcie);
SchedInst.h:#include "selector/FaissMLUIVFPQPass.h"
SchedInst.h:#ifdef MILVUS_MLU_VERSION
SchedInst.h:                bool enable_mlu = config.mlu.enable();
SchedInst.h:                if (enable_mlu) {
SchedInst.h:                    //std::vector<int64_t> build_mlus = ParseMLUDevices(config.mlu.build_index_devices());
SchedInst.h:                    std::vector<int64_t> search_mlus = ParseMLUDevices(config.mlu.search_devices());
SchedInst.h:                    int64_t mlu_search_threshold = config.mlu.mlu_search_threshold();
SchedInst.h:                    //std::string build_msg = "Build index mlu:";
SchedInst.h:                    //for (auto build_id : build_mlus) {
SchedInst.h:                    //    build_msg.append(" mlu" + std::to_string(build_id));
SchedInst.h:                    std::string search_msg = "Search mlu:";
SchedInst.h:                    for (auto search_id : search_mlus) {
SchedInst.h:                        search_msg.append(" mlu" + std::to_string(search_id));
SchedInst.h:                    search_msg.append(". mlu_search_threshold:" + std::to_string(mlu_search_threshold));
SchedInst.h://                    std::cout<<"Here is Optimizer MLUPass"<<std::endl;
SchedInst.h:                    pass_list.push_back(std::make_shared<FaissMLUIVFPQPass>());
ResourceMgr.h:    GetMluResources() {
ResourceMgr.h:        return mlu_resources_;
ResourceMgr.h:    GetNumMluResource() const;
ResourceMgr.h:    std::vector<ResourceWPtr> mlu_resources_;
ResourceFactory.cpp:    } else if (type == "MLU") {
ResourceFactory.cpp:        return std::make_shared<MluResource>(name, device_id, enable_executor);
task/SearchTask.cpp:        } else if (type == LoadType::CPU2MLU) {
task/SearchTask.cpp:            stat = execution_engine_->CopyToMlu(device_id);
task/SearchTask.cpp:            type_str = "CPU2MLU" + std::to_string(device_id);
task/Task.h:    CPU2MLU = 3,
ResourceMgr.cpp:        case ResourceType::MLU: {
ResourceMgr.cpp:            mlu_resources_.emplace_back(ResourceWPtr(resource));
ResourceMgr.cpp:    mlu_resources_.clear();
ResourceMgr.cpp:ResourceMgr::GetNumMluResource() const {
ResourceMgr.cpp:        if (res->type() == ResourceType::MLU) {
ResourceMgr.cpp:        {"number_of_mlu_resource", mlu_resources_.size()},
